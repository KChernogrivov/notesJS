/* ТИПЫ ДАННЫХ */

/*
    number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
    bigint для целых чисел произвольной длины.
    string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
    boolean для true/false.
    null для неизвестных значений – отдельный тип, имеющий одно значение null.
    undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
    object для более сложных структур данных.
    symbol для уникальных идентификаторов.

    typeof(NaN) = number - ошибка в js


    null - "ПУСТОЙ, ПУСТОЙ, ЗНАЧЕНИЕ НЕИЗВЕСТНО"
    Для typeof(null) возвращается "object" – это ошибка в языке, на самом деле это не объект.

    в то время Undefined - переменная объявлена, но значение не присвоено.

    let name = "Ilya";

    // выражение - число 1
    alert( `hello ${1}` ); // hello 1

    // выражение - строка "name"
    alert( `hello ${"name"}` ); // hello name

    // выражение - переменная, вставим её в строку
    alert( `hello ${name}` ); // hello Ilya
 */

/* МАТЕМАТИЧЕСКИЕ ДЕЙСТВИЯ */

/*
    Let num1 = 2;
    Let num1 = -num1; (Будет -2) В этом случае минус – УНАРНЫЙ

    Let num2 = 3;
    Let num2 = num2 - num2 В этом случае минус – БИНАРНЫЙ

    При сложении 1 или 2 операнда, если хотя бы 1 операнд является строкой, второй также приводится к строке,
    в то время как деление и вычитание приводит к числу ВСЕГДА.

    Бинарный плюс ( + ) преобразует не числа в числа, но не меняет знаки.
    let x = 1;
    alert( +x ); // 1

    +true = 1;
    +”” = 0;

    null становится 0 после численного преобразования.
    undefined становится NaN после численного преобразования.
    Пробельные символы, такие как \t и \n, по краям строки игнорируются при преобразовании в число,
    так что строка " \t \n", аналогично пустой строке, становится 0 после численного преобразования.

    Инкремент - ++
    Декремент - --

    Когда оператор идёт после переменной — это «постфиксная форма»: counter++.
    Возвращает старое значение
    «Префиксная форма» — это когда оператор идёт перед переменной: ++counter.
    возвращает новое значение

    let a = (1 + 2, 3 + 4);
    alert( a ); // 7 (результат вычисления 3 + 4)

    Оператор Запятая имеет очень низкий приоритет
    Пожалуйста, обратите внимание, что оператор , имеет очень низкий приоритет, ниже =, поэтому скобки важны в приведённом выше примере.
    Без них в a = 1 + 2, 3 + 4 сначала выполнится +, суммируя числа в a = 3, 7,
    затем оператор присваивания = присвоит a = 3, а то, что идёт дальше, будет игнорировано. Всё так же, как в (a = 1 + 2), 3 + 4.

    // три операции в одной строке
    for (a = 1, b = 3, c = a * b; a < 10; a++) {
    ...
    }
    Такие трюки используются во многих JavaScript-фреймворках. Вот почему мы упоминаем их.
    Но обычно они не улучшают читабельность кода, поэтому стоит хорошо подумать, прежде чем их использовать.
 */